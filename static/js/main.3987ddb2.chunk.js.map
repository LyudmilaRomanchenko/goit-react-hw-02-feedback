{"version":3,"sources":["components/Feedback/Feedback.module.css","components/Feedback/Statistics.js","components/Feedback/FeedbackOptions.js","components/Feedback/Section.js","components/Feedback/Notification.js","components/Feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Statistics","good","neutral","bad","total","positivePercentage","console","log","FeedbackOptions","this","props","options","className","s","listButton","map","option","index","listButtonItem","type","button","onClick","onLeaveFeedback","React","Component","Section","title","children","section","Notification","message","Feedback","state","handleBtnClick","name","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","Object","keys","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,QAAU,0BAA0B,MAAQ,wBAAwB,QAAU,0BAA0B,WAAa,6BAA6B,eAAiB,iCAAiC,OAAS,2B,qLCoBhNC,MAlBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAE/C,OADAC,QAAQC,IAAIN,GAEV,8BAEE,+BACE,wCAAWA,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDACsBC,GAA0C,EADhE,a,gBCTFG,E,4JACJ,WAAU,IAAD,OAGP,OAFAF,QAAQC,IAAIE,KAAKC,MAAMC,SAGrB,oBAAIC,UAAWC,IAAEC,WAAjB,SACGL,KAAKC,MAAMC,QAAQI,KAAI,SAACC,EAAQC,GAE/B,OADAX,QAAQC,IAAIS,GAEV,oBAAIJ,UAAWC,IAAEK,eAAjB,SACE,wBACEC,KAAK,SACLP,UAAWC,IAAEO,OACbC,QAAS,kBAAM,EAAKX,MAAMY,gBAAgBN,IAH5C,SAKGA,KANiCC,Y,GATpBM,IAAMC,WAyBrBhB,IClBAiB,MATf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,0BAASf,UAAWC,IAAEe,QAAtB,UACE,mBAAGhB,UAAWC,IAAEa,MAAhB,SAAwBA,IACvBC,MCAQE,MAJf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,mBAAGlB,UAAWC,IAAEiB,QAAhB,SAA0BA,KCI7BC,E,4MACJC,MAAQ,CACN/B,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGP8B,eAAiB,SAAAC,GAEf,OAAO,EAAKC,UAAS,SAAAC,GAAS,sBAC3BF,EAAOE,EAAUF,GAAQ,O,EAI9BG,mBAAqB,WACnB,IAAMjC,EAAQ,EAAK4B,MAAM/B,KAAO,EAAK+B,MAAM9B,QAAU,EAAK8B,MAAM7B,IAEhE,OADAG,QAAQC,IAAIH,GACLA,G,EAGTkC,gCAAkC,WAKhC,OAJ2BC,KAAKC,MACX,IAAlB,EAAKR,MAAM/B,MACT,EAAK+B,MAAM/B,KAAO,EAAK+B,MAAM9B,QAAU,EAAK8B,MAAM7B,O,4CAKzD,WACE,OACE,gCACE,cAAC,EAAD,CAASuB,MAAM,yBAAf,SACE,cAAC,EAAD,CACEf,QAAO,YAAM8B,OAAOC,KAAKjC,KAAKuB,QAC9BV,gBAAiBb,KAAKwB,mBAI1B,cAAC,EAAD,CAASP,MAAM,aAAf,SACGjB,KAAKuB,MAAM/B,MAAQQ,KAAKuB,MAAM9B,SAAWO,KAAKuB,MAAM7B,IACnD,cAAC,EAAD,CACEF,KAAMQ,KAAKuB,MAAM/B,KACjBC,QAASO,KAAKuB,MAAM9B,QACpBC,IAAKM,KAAKuB,MAAM7B,IAChBC,MAAOK,KAAK4B,qBACZhC,mBAAoBI,KAAK6B,oCAG3B,cAAC,EAAD,CAAcR,QAAQ,+B,GAhDXP,IAAMC,WAwDdO,ICrCAY,MAtBf,WACE,OAiBE,aAhBA,CAgBC,EAAD,KCVWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3987ddb2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Feedback_section__GKYSR\",\"title\":\"Feedback_title__2PBOl\",\"message\":\"Feedback_message__1wwTI\",\"listButton\":\"Feedback_listButton__TS-oP\",\"listButtonItem\":\"Feedback_listButtonItem__1UKTd\",\"button\":\"Feedback_button__RqM4n\"};","// import React from 'react';\n// import s from './Feedback.module.css';\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  console.log(good);\n  return (\n    <div>\n      {/* <h3>Statistics</h3> */}\n      <ul>\n        <li>Good: {good}</li>\n        <li>Neutral: {neutral}</li>\n        <li>Bad: {bad}</li>\n        <li>Total: {total}</li>\n        <li>\n          Positive feedback: {positivePercentage ? positivePercentage : 0}%\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Statistics;\n","import React from 'react';\nimport s from './Feedback.module.css';\n\n//options,\nclass FeedbackOptions extends React.Component {\n  render() {\n    console.log(this.props.options);\n\n    return (\n      <ul className={s.listButton}>\n        {this.props.options.map((option, index) => {\n          console.log(option);\n          return (\n            <li className={s.listButtonItem} key={index}>\n              <button\n                type=\"button\"\n                className={s.button}\n                onClick={() => this.props.onLeaveFeedback(option)}\n              >\n                {option}\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n}\n\nexport default FeedbackOptions;\n\n// console.log(onLeaveFeedback);\n// //   console.log(options.options);\n// //   const array = (options.options);\n// //   console.log(array);\n// options.options.map((option, index) =>\n// //   console.log(option);\n\n// // {/* <li className={s.listButtonItem}>\n//           <button\n//             type=\"button\"\n//             className={s.buttonGood}\n//             onClick={() => onLeaveFeedback('good')}\n//           >\n//             Good\n//           </button>\n//         </li>\n//         <li className={s.listButtonItem}>\n//           <button\n//             type=\"button\"\n//             className={s.buttonNeutral}\n//             onClick={() => onLeaveFeedback('neutral')}\n//           >\n//             Neutral\n//           </button>\n//         </li>\n//         <li className={s.listButtonItem}>\n//           <button\n//             type=\"button\"\n//             className={s.buttonBad}\n//             onClick={() => onLeaveFeedback('bad')}\n//           >\n//             Bad\n//           </button>\n//         </li> */}\n//       {/* </ul> */}\n//     // </div>\n","import s from './Feedback.module.css';\n\nfunction Section({ title, children }) {\n  return (\n    <section className={s.section}>\n      <p className={s.title}>{title}</p>\n      {children}\n    </section>\n  );\n}\n\nexport default Section;\n","import s from './Feedback.module.css';\n\nfunction Notification({ message }) {\n  return <p className={s.message}>{message}</p>;\n}\n\nexport default Notification;\n","import React from 'react';\n// import s from './Feedback.module.css';\nimport Statistics from './Statistics';\nimport FeedbackOptions from './FeedbackOptions';\nimport Section from './Section';\nimport Notification from './Notification';\n\nclass Feedback extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleBtnClick = name => {\n    // console.log(this.state[name]);\n    return this.setState(prevState => ({\n      [name]: prevState[name] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const total = this.state.good + this.state.neutral + this.state.bad;\n    console.log(total);\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const positivePercentage = Math.round(\n      (this.state.good * 100) /\n        (this.state.good + this.state.neutral + this.state.bad),\n    );\n    return positivePercentage;\n  };\n\n  render() {\n    return (\n      <div>\n        <Section title=\"Please leaven feedback\">\n          <FeedbackOptions\n            options={[...Object.keys(this.state)]}\n            onLeaveFeedback={this.handleBtnClick}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {this.state.good || this.state.neutral || this.state.bad ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default Feedback;\n\n// handleBtnClick = () => {\n//   console.log(this.state);\n// };\n\n// handleGoodBtnClick = () => {\n//   console.log('Good');\n//   this.setState(prevState => ({\n//     good: prevState.good + 1,\n//   }));\n// };\n\n// handleNeutralBtnClick = () => {\n//   console.log('Neutral');\n//   this.setState(prevState => ({\n//     neutral: prevState.neutral + 1,\n//   }));\n// };\n\n// handleBadBtnClick = () => {\n//   console.log('Bad');\n//   this.setState(prevState => ({\n//     bad: prevState.bad + 1,\n//   }));\n// };\n\n//  {\n//    /* <h2>Please leaven feedback</h2> */\n//  }\n//  {\n//    /* <ul className={s.listButton}>\n//           <li className={s.listButtonItem}>\n//             <button\n//               type=\"button\"\n//               className={s.buttonGood}\n//               // onClick={this.handleGoodBtnClick}\n//               onClick={() => this.handleBtnClick('good')}\n//             >\n//               Good\n//             </button>\n//           </li>\n//           <li className={s.listButtonItem}>\n//             <button\n//               type=\"button\"\n//               className={s.buttonNeutral}\n//               onClick={() => this.handleBtnClick('neutral')}\n//             >\n//               Neutral\n//             </button>\n//           </li>\n//           <li className={s.listButtonItem}>\n//             <button\n//               type=\"button\"\n//               className={s.buttonBad}\n//               onClick={() => this.handleBtnClick('bad')}\n//             >\n//               Bad\n//             </button>\n//           </li>\n//         </ul> */\n//  }\n//  {\n//    /* <h3>Statistics</h3>\n//         <ul>\n//           <li>Good: {this.state.good}</li>\n//           <li>Neutral: {this.state.neutral}</li>\n//           <li>Bad: {this.state.bad}</li>\n//           <li>Total: {this.countTotalFeedback()}</li>\n//           <li>\n//             Positive feedback:{' '}\n//             {this.countPositiveFeedbackPercentage()\n//               ? this.countPositiveFeedbackPercentage()\n//               : 0}\n//             %\n//           </li>\n//         </ul> */\n//  }\n\n//  {\n//    /* <FeedbackOptions\n//           options={[...Object.keys(this.state)]}\n//           onLeaveFeedback={this.handleBtnClick}\n//         />\n\n//         <Statistics\n//           good={this.state.good}\n//           neutral={this.state.neutral}\n//           bad={this.state.bad}\n//           total={this.countTotalFeedback()}\n//           positivePercentage={this.countPositiveFeedbackPercentage()}\n//         /> */\n//  }\n","// import logo from './logo.svg';\nimport './App.css';\nimport Feedback from './components/Feedback/Feedback';\n\nfunction App() {\n  return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n    <Feedback />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}